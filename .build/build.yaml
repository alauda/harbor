apiVersion: builds.katanomi.dev/v1alpha1
kind: Build
spec:
  runTemplate:
    spec:
      timeouts:
        pipeline: 3h
        tasks: 3h
      taskRunSpecs: []
  workspaces:
    - description: |
        This workspace is shared among all the pipeline tasks to read/write common resources
      name: source
  params:
    - name: run_sonar
      type: string
      description: |
        Controls whether to run a sonar scan. 
        The sonar of the open source component does not need to run frequently,  and the sonar service may cause pipeline failure due to too many scanning tasks, which is a huge cost for building a harbor image, so the sonar scan is turned off by default,  and the switch control is added, and it is turned on only when necessary.
  tasks:
    - name: build-image
      timeout: 2.5h
      workspaces:
        - name: source
          workspace: source
      params:
        - name: container-images
          value:
            - build-harbor.alauda.cn/devops/goharbor-harbor-portal
            - build-harbor.alauda.cn/devops/goharbor-notary-server-photon
            - build-harbor.alauda.cn/devops/goharbor-notary-signer-photon
            - build-harbor.alauda.cn/devops/goharbor-harbor-registryctl
            - build-harbor.alauda.cn/devops/goharbor-registry-photon
            - build-harbor.alauda.cn/devops/goharbor-nginx-photon
            - build-harbor.alauda.cn/devops/goharbor-harbor-jobservice
            - build-harbor.alauda.cn/devops/goharbor-harbor-core
            - build-harbor.alauda.cn/devops/goharbor-chartmuseum-photon
            - build-harbor.alauda.cn/devops/goharbor-trivy-adapter-photon
            - build-harbor.alauda.cn/devops/goharbor-harbor-exporter
        - name: container-image-tag
          value: 2.6.4-$(build.git.lastCommit.shortID)
      taskSpec:
        metadata:
          annotations:
            katanomi.dev/class.ociContainerImageBuild: "true"
        params:
          - name: container-images
            type: array
            description: harbor components images
          - name: container-image-tag
            description: image tag
        volumes:
          - name: dind-certs
            emptyDir: {}
        sidecars:
          - image: docker-mirrors.alauda.cn/library/docker:20.10-dind
            name: docker-daemon
            args:
              - --storage-driver=overlay2
              - --userland-proxy=false
              - --debug
              - --registry-mirror=https://docker-mirrors.alauda.cn
            securityContext:
              privileged: true
            env:
              - name: DOCKER_TLS_CERTDIR
                value: /certs
            resources:
              requests:
                cpu: 1000m
                memory: 2000Mi
              limits:
                cpu: 4000m
                memory: 8000Mi
            volumeMounts:
              - mountPath: /certs/client
                name: dind-certs
              - mountPath: /workspace/source
                name: $(workspaces.source.volume)
            readinessProbe:
              periodSeconds: 1
              exec:
                command:
                  - ls
                  - /certs/client/ca.pem
        steps:
          - name: build-amd64
            image: registry.alauda.cn:60080/devops/builder-tools:ubuntu-v3.8.1
            imagePullPolicy: IfNotPresent
            workingDir: $(workspaces.source.path)
            timeout: 2.5h
            resources:
              requests:
                cpu: 1000m
                memory: 2000Mi
              limits:
                cpu: 2000m
                memory: 4000Mi
            env:
              - name: DOCKER_HOST
                value: tcp://localhost:2376
              - name: DOCKER_TLS_VERIFY
                value: "1"
              - name: DOCKER_CERT_PATH
                value: /certs/client
            volumeMounts:
              - mountPath: /certs/client
                name: dind-certs
            args:
              - $(params.container-images[*])
            script: |
              #!/bin/bash
              set -e
              git config --global --add safe.directory $(workspaces.source.path)
              /katanomi/bin/ktn-settings copy docker --always-match=true ~/.docker/config.json
              bash make/patches/patch-amd64.sh
              echo "=> ✅  patch script done."

              set -x
              BUILDPATH=$(workspaces.source.path)
              VERSIONTAG=$(params.container-image-tag)-amd64
              BASEIMAGETAG=$(params.container-image-tag)-amd64
              BASEIMAGENAMESPACE=build-harbor.alauda.cn/devops
              IMAGENAMESPACE=build-harbor.alauda.cn/devops              
              BUILDPATH="$BUILDPATH" make compile
              echo "=> ✅  compile harbor done."
              BUILDPATH="$BUILDPATH" BASEIMAGETAG="$BASEIMAGETAG" BASEIMAGENAMESPACE="$BASEIMAGENAMESPACE" VERSIONTAG="$VERSIONTAG" IMAGENAMESPACE="$IMAGENAMESPACE" make build
              echo "=> ✅  build harbor done."

              for arg in "$@"; do
                image="${arg}:$(params.container-image-tag)-amd64"
                # only for amd64, arm has pushed when buildx build --type=registry
                docker push "${image}"
              done
              echo "=> ✅  push harbor image done."
          - name: build-arm64
            image: registry.alauda.cn:60080/devops/builder-tools:ubuntu-v3.8.1
            imagePullPolicy: IfNotPresent
            workingDir: $(workspaces.source.path)
            timeout: 2.5h
            resources:
              requests:
                cpu: 1000m
                memory: 2000Mi
              limits:
                cpu: 2000m
                memory: 4000Mi
            env:
              - name: DOCKER_HOST
                value: tcp://localhost:2376
              - name: DOCKER_TLS_VERIFY
                value: "1"
              - name: DOCKER_CERT_PATH
                value: /certs/client
            volumeMounts:
              - mountPath: /certs/client
                name: dind-certs
            script: |
              #!/bin/bash
              set -ex
              git config --global --add safe.directory $(workspaces.source.path)
              /katanomi/bin/ktn-settings copy docker --always-match=true ~/.docker/config.json
              bash make/patches/patch-arm64.sh
              echo "=> ✅  patch script done."
              BUILDPATH=$(workspaces.source.path)
              VERSIONTAG=$(params.container-image-tag)-arm64
              BASEIMAGETAG=$(params.container-image-tag)-arm64
              BASEIMAGENAMESPACE=build-harbor.alauda.cn/devops
              IMAGENAMESPACE=build-harbor.alauda.cn/devops
              BUILDPATH="$BUILDPATH" make compile
              echo "=> ✅  compile harbor done."
              BUILDPATH="$BUILDPATH" BASEIMAGETAG="$BASEIMAGETAG" BASEIMAGENAMESPACE="$BASEIMAGENAMESPACE" VERSIONTAG="$VERSIONTAG" IMAGENAMESPACE="$IMAGENAMESPACE" make build
              echo "=> ✅  build harbor done."
        workspaces:
          - name: source
            workspace: source
    - name: build-manifests
      runAfter:
        - build-image
      timeout: 30m
      retries: 0
      taskRef:
        kind: ClusterTask
        name: merge-image-buildkit
      workspaces:
        - name: source
          workspace: source
      params:
        - name: container-images
          value:
            - build-harbor.alauda.cn/devops/goharbor-harbor-portal:2.6.4-$(build.git.lastCommit.shortID)
            - build-harbor.alauda.cn/devops/goharbor-notary-server-photon:2.6.4-$(build.git.lastCommit.shortID)
            - build-harbor.alauda.cn/devops/goharbor-notary-signer-photon:2.6.4-$(build.git.lastCommit.shortID)
            - build-harbor.alauda.cn/devops/goharbor-harbor-registryctl:2.6.4-$(build.git.lastCommit.shortID)
            - build-harbor.alauda.cn/devops/goharbor-registry-photon:2.6.4-$(build.git.lastCommit.shortID)
            - build-harbor.alauda.cn/devops/goharbor-nginx-photon:2.6.4-$(build.git.lastCommit.shortID)
            - build-harbor.alauda.cn/devops/goharbor-harbor-jobservice:2.6.4-$(build.git.lastCommit.shortID)
            - build-harbor.alauda.cn/devops/goharbor-harbor-core:2.6.4-$(build.git.lastCommit.shortID)
            - build-harbor.alauda.cn/devops/goharbor-chartmuseum-photon:2.6.4-$(build.git.lastCommit.shortID)
            - build-harbor.alauda.cn/devops/goharbor-trivy-adapter-photon:2.6.4-$(build.git.lastCommit.shortID)
            - build-harbor.alauda.cn/devops/goharbor-harbor-exporter:2.6.4-$(build.git.lastCommit.shortID)
        - name: source-image-digests
          value:
            - build-harbor.alauda.cn/devops/goharbor-harbor-portal:2.6.4-$(build.git.lastCommit.shortID)-amd64
            - build-harbor.alauda.cn/devops/goharbor-harbor-portal:2.6.4-$(build.git.lastCommit.shortID)-arm64
            - build-harbor.alauda.cn/devops/goharbor-notary-server-photon:2.6.4-$(build.git.lastCommit.shortID)-amd64
            - build-harbor.alauda.cn/devops/goharbor-notary-server-photon:2.6.4-$(build.git.lastCommit.shortID)-arm64
            - build-harbor.alauda.cn/devops/goharbor-notary-signer-photon:2.6.4-$(build.git.lastCommit.shortID)-amd64
            - build-harbor.alauda.cn/devops/goharbor-notary-signer-photon:2.6.4-$(build.git.lastCommit.shortID)-arm64
            - build-harbor.alauda.cn/devops/goharbor-harbor-registryctl:2.6.4-$(build.git.lastCommit.shortID)-amd64
            - build-harbor.alauda.cn/devops/goharbor-harbor-registryctl:2.6.4-$(build.git.lastCommit.shortID)-arm64
            - build-harbor.alauda.cn/devops/goharbor-registry-photon:2.6.4-$(build.git.lastCommit.shortID)-amd64
            - build-harbor.alauda.cn/devops/goharbor-registry-photon:2.6.4-$(build.git.lastCommit.shortID)-arm64
            - build-harbor.alauda.cn/devops/goharbor-nginx-photon:2.6.4-$(build.git.lastCommit.shortID)-amd64
            - build-harbor.alauda.cn/devops/goharbor-nginx-photon:2.6.4-$(build.git.lastCommit.shortID)-arm64
            - build-harbor.alauda.cn/devops/goharbor-harbor-jobservice:2.6.4-$(build.git.lastCommit.shortID)-amd64
            - build-harbor.alauda.cn/devops/goharbor-harbor-jobservice:2.6.4-$(build.git.lastCommit.shortID)-arm64
            - build-harbor.alauda.cn/devops/goharbor-harbor-core:2.6.4-$(build.git.lastCommit.shortID)-amd64
            - build-harbor.alauda.cn/devops/goharbor-harbor-core:2.6.4-$(build.git.lastCommit.shortID)-arm64
            - build-harbor.alauda.cn/devops/goharbor-chartmuseum-photon:2.6.4-$(build.git.lastCommit.shortID)-amd64
            - build-harbor.alauda.cn/devops/goharbor-chartmuseum-photon:2.6.4-$(build.git.lastCommit.shortID)-arm64
            - build-harbor.alauda.cn/devops/goharbor-trivy-adapter-photon:2.6.4-$(build.git.lastCommit.shortID)-amd64
            - build-harbor.alauda.cn/devops/goharbor-trivy-adapter-photon:2.6.4-$(build.git.lastCommit.shortID)-arm64
            - build-harbor.alauda.cn/devops/goharbor-harbor-exporter:2.6.4-$(build.git.lastCommit.shortID)-amd64
            - build-harbor.alauda.cn/devops/goharbor-harbor-exporter:2.6.4-$(build.git.lastCommit.shortID)-arm64
    - name: sonar
      timeout: 30m
      retries: 0
      taskRef:
        kind: ClusterTask
        name: sonarqube-analysis
      workspaces:
        - name: source
          workspace: source
      when:
        - input: $(params.run_sonar)
          operator: in
          values:
            - "true"
      params:
        - name: server
          value: https://build-sonar.alauda.cn
